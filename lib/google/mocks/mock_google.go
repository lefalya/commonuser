// Code generated by MockGen. DO NOT EDIT.
// Source: google_sql.go
//
// Generated by this command:
//
//	mockgen -source=google_sql.go -destination=mocks/mock_google.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	google "github.com/lefalya/commonuser/lib/google"
	gomock "go.uber.org/mock/gomock"
)

// MockGoogleManagerSQLInterface is a mock of GoogleManagerSQLInterface interface.
type MockGoogleManagerSQLInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleManagerSQLInterfaceMockRecorder
	isgomock struct{}
}

// MockGoogleManagerSQLInterfaceMockRecorder is the mock recorder for MockGoogleManagerSQLInterface.
type MockGoogleManagerSQLInterfaceMockRecorder struct {
	mock *MockGoogleManagerSQLInterface
}

// NewMockGoogleManagerSQLInterface creates a new mock instance.
func NewMockGoogleManagerSQLInterface(ctrl *gomock.Controller) *MockGoogleManagerSQLInterface {
	mock := &MockGoogleManagerSQLInterface{ctrl: ctrl}
	mock.recorder = &MockGoogleManagerSQLInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleManagerSQLInterface) EXPECT() *MockGoogleManagerSQLInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockGoogleManagerSQLInterface) Delete(sqlTransaction *sqlx.Tx, arg1 google.GoogleSQL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sqlTransaction, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) Delete(sqlTransaction, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).Delete), sqlTransaction, arg1)
}

// FindByEmail mocks base method.
func (m *MockGoogleManagerSQLInterface) FindByEmail(email string) (*google.GoogleSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*google.GoogleSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).FindByEmail), email)
}

// FindByUUID mocks base method.
func (m *MockGoogleManagerSQLInterface) FindByUUID(uuid string) (*google.GoogleSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", uuid)
	ret0, _ := ret[0].(*google.GoogleSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) FindByUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).FindByUUID), uuid)
}

// FindByUserUUID mocks base method.
func (m *MockGoogleManagerSQLInterface) FindByUserUUID(userUUID string) (*google.GoogleSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserUUID", userUUID)
	ret0, _ := ret[0].(*google.GoogleSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserUUID indicates an expected call of FindByUserUUID.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) FindByUserUUID(userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserUUID", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).FindByUserUUID), userUUID)
}

// Insert mocks base method.
func (m *MockGoogleManagerSQLInterface) Insert(sqlTransaction *sqlx.Tx, arg1 google.GoogleSQL) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", sqlTransaction, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) Insert(sqlTransaction, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).Insert), sqlTransaction, arg1)
}

// SeedByEmail mocks base method.
func (m *MockGoogleManagerSQLInterface) SeedByEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedByEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeedByEmail indicates an expected call of SeedByEmail.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) SeedByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedByEmail", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).SeedByEmail), email)
}

// SeedByUUID mocks base method.
func (m *MockGoogleManagerSQLInterface) SeedByUUID(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedByUUID", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeedByUUID indicates an expected call of SeedByUUID.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) SeedByUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedByUUID", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).SeedByUUID), uuid)
}

// SeedByUserUUID mocks base method.
func (m *MockGoogleManagerSQLInterface) SeedByUserUUID(userUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedByUserUUID", userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeedByUserUUID indicates an expected call of SeedByUserUUID.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) SeedByUserUUID(userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedByUserUUID", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).SeedByUserUUID), userUUID)
}

// SetEntityName mocks base method.
func (m *MockGoogleManagerSQLInterface) SetEntityName(entityName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEntityName", entityName)
}

// SetEntityName indicates an expected call of SetEntityName.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) SetEntityName(entityName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEntityName", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).SetEntityName), entityName)
}

// Update mocks base method.
func (m *MockGoogleManagerSQLInterface) Update(sqlTransaction *sqlx.Tx, arg1 google.GoogleSQL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", sqlTransaction, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGoogleManagerSQLInterfaceMockRecorder) Update(sqlTransaction, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGoogleManagerSQLInterface)(nil).Update), sqlTransaction, arg1)
}

// MockGoogleFetchersInterface is a mock of GoogleFetchersInterface interface.
type MockGoogleFetchersInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleFetchersInterfaceMockRecorder
	isgomock struct{}
}

// MockGoogleFetchersInterfaceMockRecorder is the mock recorder for MockGoogleFetchersInterface.
type MockGoogleFetchersInterfaceMockRecorder struct {
	mock *MockGoogleFetchersInterface
}

// NewMockGoogleFetchersInterface creates a new mock instance.
func NewMockGoogleFetchersInterface(ctrl *gomock.Controller) *MockGoogleFetchersInterface {
	mock := &MockGoogleFetchersInterface{ctrl: ctrl}
	mock.recorder = &MockGoogleFetchersInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleFetchersInterface) EXPECT() *MockGoogleFetchersInterfaceMockRecorder {
	return m.recorder
}

// FetchByEmail mocks base method.
func (m *MockGoogleFetchersInterface) FetchByEmail(email string) (*google.GoogleSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByEmail", email)
	ret0, _ := ret[0].(*google.GoogleSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByEmail indicates an expected call of FetchByEmail.
func (mr *MockGoogleFetchersInterfaceMockRecorder) FetchByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByEmail", reflect.TypeOf((*MockGoogleFetchersInterface)(nil).FetchByEmail), email)
}

// FetchByRandId mocks base method.
func (m *MockGoogleFetchersInterface) FetchByRandId(randId string) (*google.GoogleSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByRandId", randId)
	ret0, _ := ret[0].(*google.GoogleSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByRandId indicates an expected call of FetchByRandId.
func (mr *MockGoogleFetchersInterfaceMockRecorder) FetchByRandId(randId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByRandId", reflect.TypeOf((*MockGoogleFetchersInterface)(nil).FetchByRandId), randId)
}

// FetchByUUID mocks base method.
func (m *MockGoogleFetchersInterface) FetchByUUID(uuid string) (*google.GoogleSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByUUID", uuid)
	ret0, _ := ret[0].(*google.GoogleSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByUUID indicates an expected call of FetchByUUID.
func (mr *MockGoogleFetchersInterfaceMockRecorder) FetchByUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByUUID", reflect.TypeOf((*MockGoogleFetchersInterface)(nil).FetchByUUID), uuid)
}

// FetchByUserUUID mocks base method.
func (m *MockGoogleFetchersInterface) FetchByUserUUID(userUUID string) (*google.GoogleSQL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByUserUUID", userUUID)
	ret0, _ := ret[0].(*google.GoogleSQL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByUserUUID indicates an expected call of FetchByUserUUID.
func (mr *MockGoogleFetchersInterfaceMockRecorder) FetchByUserUUID(userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByUserUUID", reflect.TypeOf((*MockGoogleFetchersInterface)(nil).FetchByUserUUID), userUUID)
}
